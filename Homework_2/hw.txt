Kyle Johnson CS32 HW2 report
2. What are the first 12 coordinates (r,c) popped off by the stack?
    1. (6,5) <- start coord
    2. (6,6)
    3. (6,4)
    4. (7,4)
    5. (8,4)
    6. (8,3)
    7. (8,2)
    8. (8,1)
    9. (7,1)
    10. (6,3)
    11. (5,5)
    12. (4,5)
    //13. (4,4)
4. What are the first 12 coordinates (r,c) popped from the queue?
    1. (6,5)
    2. (5,5)
    3. (6,4)
    4. (6,6)
    5. (4.5)
    6. (6,3)
    7. (7,4)
    8. (3,5)
    9. (4,4)
    10. (8,4)
    11. (2,5)
    12. (4,3)
    //13. (8,3)

    How do the two algorithms differ from each other? (Hint: how and why do they visit cells in the maze in a different order?)
        The 2 algorithms differ with how they process squares. In DFS, the implementation using a stack, we process as deep
        as we can East, then South, then West, then North. This is because that is the reverse order of our conditionals. 
        Since we are using a stack, which is last in first out, South gets processed first, and so on. If you map the path that
        the dfs takes, you will see it first goes East into the wall, then south from the next valid square then west. If clearly
        iterates as far as it can until it reaches a dead end. At that point, no other Coords are added to the stack and it returns
        to previously stacked Coordinates. On the contrary, our DFS which uses the queue processes elements in the order with which 
        they appear in the conditional. Since BFS is first in first out, we first go North, then West, then South, then East, but 
        only by one square at a time. If you mapped the path of the bfs, you would see it processes first all Coords one spot away
        from the start, then 2, then 3, etc. That is the main difference between the 2 algorithms. 